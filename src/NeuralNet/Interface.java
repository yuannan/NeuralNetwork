package NeuralNet;

import java.util.ArrayList;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;


public class Interface extends javax.swing.JFrame {
    //init network sizes
    int inputNodes = 40;
    int hiddenNodes = 100;
    int outputNodes = 3;
    //init global vars
    double output[] = new double[outputNodes];
    double error[] = new double[outputNodes];
    //init filing systems
    String filename;
    String[] fileStringNames = {"hiddenWeights", "outputWeights", "inputBias", "hiddenBias", "outputBias"};
    String[] fileInputPaths = new String[outputNodes];
    //init training arrays
    char[] inputCharData = new char[inputNodes];
    double[] inputDoubleData = new double[inputNodes];
    double[] inputOutputData =  new double[outputNodes];
    //init training rates
    double rate;
    double biasRate;
    double mass;
    //init global input fields
    String messageBoxString;
    //init global training sets
    ArrayList<double[]> trainingInput = new ArrayList();
    ArrayList<double[]> trainingOutput = new ArrayList();
    
    //init new network
    Network net;
    
    public Interface() {
        initComponents();
        this.updateInputs();
        net = new Network(inputNodes,hiddenNodes,outputNodes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainingHeaderLabel = new javax.swing.JLabel();
        newNetworkButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageBox = new javax.swing.JTextArea();
        trainingInputLabel = new javax.swing.JLabel();
        massLabel = new javax.swing.JLabel();
        findSizeButton = new javax.swing.JButton();
        sizeOutputBox = new javax.swing.JTextField();
        trainingCountButton = new javax.swing.JButton();
        trainingCountOutputBox = new javax.swing.JTextField();
        inputPanel = new javax.swing.JPanel();
        inputLabel = new javax.swing.JLabel();
        inputWord = new javax.swing.JTextField();
        languageIndexComboBox = new javax.swing.JComboBox<>();
        langIndexLabel = new javax.swing.JLabel();
        rateInputLabel = new javax.swing.JLabel();
        rateInput = new javax.swing.JTextField();
        biasRateInput = new javax.swing.JTextField();
        biasRateInputLabel = new javax.swing.JLabel();
        massInputLabel = new javax.swing.JLabel();
        massInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        trainButton = new javax.swing.JButton();
        roundsInput = new javax.swing.JTextField();
        autodataCheckbox = new javax.swing.JCheckBox();
        calcButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        inputFileSet2Path = new javax.swing.JTextField();
        inputFileSet1Path = new javax.swing.JTextField();
        inputFileSet0Path = new javax.swing.JTextField();
        importButton = new javax.swing.JButton();
        filenameBox = new javax.swing.JTextField();
        exportButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        outputLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        output0 = new javax.swing.JTextField();
        error0 = new javax.swing.JTextField();
        output1 = new javax.swing.JTextField();
        error1 = new javax.swing.JTextField();
        output2 = new javax.swing.JTextField();
        error2 = new javax.swing.JTextField();
        lang0OutputLabel = new javax.swing.JLabel();
        lang1OutputLabel = new javax.swing.JLabel();
        lang2OutputLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        updateOutputsButton = new javax.swing.JButton();
        updateInputsButton = new javax.swing.JButton();
        outputNodesBox = new javax.swing.JTextField();
        hiddenNodesBox = new javax.swing.JTextField();
        inputNodesBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        trainingHeaderLabel.setText("TRAINING");

        newNetworkButton.setText("NEW NETWORK");
        newNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNetworkButtonActionPerformed(evt);
            }
        });

        messageLabel.setText("Message: ");

        messageBox.setColumns(13);
        messageBox.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        messageBox.setRows(5);
        jScrollPane2.setViewportView(messageBox);

        trainingInputLabel.setText("INPUTS");

        findSizeButton.setText("Amount of Weights");
        findSizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findSizeButtonActionPerformed(evt);
            }
        });

        trainingCountButton.setText("Times Trained");
        trainingCountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainingCountButtonActionPerformed(evt);
            }
        });

        inputLabel.setText("Word");

        inputWord.setText("word");

        languageIndexComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Language 1", "Language 2", "Language 3"}));
        languageIndexComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageIndexComboBoxActionPerformed(evt);
            }
        });

        langIndexLabel.setText("Language Index");

        rateInputLabel.setText("General Learning Rate");

        rateInput.setText("0.001");
        rateInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateInputActionPerformed(evt);
            }
        });

        biasRateInput.setText("0.005");
        biasRateInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biasRateInputActionPerformed(evt);
            }
        });

        biasRateInputLabel.setText("Bias Learning Rate");

        massInputLabel.setText("Momentum Learning Rate");

        massInput.setText("0.01");
        massInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                massInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(langIndexLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rateInputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(massInputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(biasRateInputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputWord)
                    .addComponent(rateInput)
                    .addComponent(biasRateInput)
                    .addComponent(massInput)
                    .addComponent(languageIndexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputLabel)
                    .addComponent(inputWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(langIndexLabel)
                    .addComponent(languageIndexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rateInputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(biasRateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(biasRateInputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(massInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(massInputLabel)))
        );

        jLabel1.setText("OUTPUTS");

        trainButton.setText("TRAIN");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        roundsInput.setText("1000");

        autodataCheckbox.setText("file mode");

        calcButton.setText("Calculate");
        calcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(autodataCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(roundsInput)
            .addComponent(trainButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(calcButton, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calcButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(trainButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roundsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autodataCheckbox))
        );

        inputFileSet2Path.setText("german");

        inputFileSet1Path.setText("chinese");

        inputFileSet0Path.setText("english");
        inputFileSet0Path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileSet0PathActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputFileSet0Path, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputFileSet1Path)
                    .addComponent(filenameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputFileSet2Path, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileSet2Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFileSet1Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFileSet0Path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(filenameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportButton))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        outputLabel.setText("Possibility");

        errorLabel.setText("Cost/Error Function");

        output0.setText("output");

        error0.setText("error");

        output1.setText("output");
        output1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                output1ActionPerformed(evt);
            }
        });

        error1.setText("error");

        output2.setText("output");
        output2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                output2ActionPerformed(evt);
            }
        });

        error2.setText("error");

        lang0OutputLabel.setText("lang0");

        lang1OutputLabel.setText("lang1");

        lang2OutputLabel.setText("lang2");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(output0, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(output1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(output2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(error0, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(error1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(error2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lang0OutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lang1OutputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lang2OutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lang0OutputLabel)
                    .addComponent(lang1OutputLabel)
                    .addComponent(lang2OutputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(output0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(output1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(output2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(error0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLabel))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jLabel2.setText("TOOLS");

        updateOutputsButton.setText("Update Outputs");
        updateOutputsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOutputsButtonActionPerformed(evt);
            }
        });

        updateInputsButton.setText("Update Inputs");
        updateInputsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateInputsButtonActionPerformed(evt);
            }
        });

        outputNodesBox.setText("3");

        hiddenNodesBox.setText("100");

        inputNodesBox.setText("40");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(trainingInputLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(trainingHeaderLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1169, 1169, 1169)
                                .addComponent(massLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(messageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sizeOutputBox)
                                    .addComponent(trainingCountOutputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(trainingCountButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(findSizeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(updateInputsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateOutputsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(newNetworkButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(inputNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hiddenNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainingInputLabel)
                    .addComponent(trainingHeaderLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(massLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(findSizeButton)
                                .addComponent(sizeOutputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(trainingCountButton)
                                .addComponent(trainingCountOutputBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(updateOutputsButton)
                                .addComponent(updateInputsButton))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(newNetworkButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(outputNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hiddenNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(inputNodesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel2)))
                    .addComponent(messageLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNetworkButtonActionPerformed
        // TODO add your handling code here:
        this.updateInputs();
        net = new Network(inputNodes, hiddenNodes,outputNodes);
    }//GEN-LAST:event_newNetworkButtonActionPerformed

    private void calcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcButtonActionPerformed
        // TODO add your handling code here:
        updateInputs();
        net.compute(inputDoubleData, inputOutputData);
        updateOutputs();
    }//GEN-LAST:event_calcButtonActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        updateInputs();
        if(autodataCheckbox.isSelected()){
            this.initTrainingSets();
            for(int set = 0; set < trainingInput.size(); set++ ){
                net.train(trainingInput.get(set), trainingOutput.get(set), rate, biasRate, mass);
            }
        } else{
            net.train(inputDoubleData, inputOutputData, rate, biasRate, mass);
        }
        updateOutputs();
    }//GEN-LAST:event_trainButtonActionPerformed

    public void initTrainingSets(){
        //read in all sets
        ArrayList<ArrayList<double[]>> allSets = new ArrayList();
        javax.swing.JTextField[] inputBoxes = {inputFileSet0Path, inputFileSet1Path, inputFileSet2Path};
        for(int lang = 0; lang < outputNodes; lang++){
            ArrayList<double[]> langInDouble = new ArrayList();
            String path = inputBoxes[lang].getText();
            try{
                BufferedReader br = new BufferedReader(new FileReader(path));
                String line;
                while((line = br.readLine()) != null){
                    double[] wordInDouble = this.charsToDouble(line.toCharArray());
                    langInDouble.add(wordInDouble);
                }
            }catch(IOException e){
                System.out.print("Bad file read for training init");
            }
            allSets.add(langInDouble);
        }
        
        //clear sets
        trainingInput.clear();
        trainingOutput.clear();
        //populating new sets
        for(int wordSet = 0; wordSet < Integer.valueOf(roundsInput.getText()); wordSet++){
            //randomly pick one language
            int lang = (int)(Math.random() * outputNodes);
            //get random set from that language
            int set = (int)(Math.random() * allSets.get(lang).size());
            trainingInput.add(allSets.get(lang).get(set).clone());
            double[] trainingOutputDoubles = new double[outputNodes];
            for(int n = 0; n < outputNodes; n++){
                trainingOutputDoubles[n] = (n == lang)? 1 : 0;
            }
            trainingOutput.add(trainingOutputDoubles.clone());
        }
        
    }
    
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        // getting the dump as strings
        String[] outputStrings = {net.hiddenWeights.debugReturn(), net.outputWeights.debugReturn(), net.bInput.debugReturn(), net.bHidden.debugReturn(), net.bOutput.debugReturn()};
        
        //init current time
        DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
        Date dateobj = new Date();
        String filename = filenameBox.getText();
        String filenameAppendix = (filename.equals(""))? df.format(dateobj) : filename;
        
        //writing files
        try{
            String dumpString = "";
            for(int s = 0; s < outputStrings.length; s++){
                dumpString += "\n" + fileStringNames[s] + "\n" + outputStrings[s] + "\n";
                BufferedWriter bw = new BufferedWriter(new FileWriter("weights/"+fileStringNames[s]+filenameAppendix));
                bw.write(outputStrings[s]);
                bw.close();
            }
            messageBox.setText(dumpString);
        } catch (IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void rateInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rateInputActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        //new network with weights given by the timestamp
        updateInputs();
        ArrayList<Matrix> inputMatricies = new ArrayList();
        for(int s = 0; s < fileStringNames.length; s++){
            Matrix tempMatrix = new Matrix("weights/"+fileStringNames[s]+filename);
            inputMatricies.add(tempMatrix);
        }
        
        net = new Network(inputNodes, hiddenNodes, outputNodes, inputMatricies.get(0), inputMatricies.get(1), inputMatricies.get(2), inputMatricies.get(3), inputMatricies.get(4));
    }//GEN-LAST:event_importButtonActionPerformed

    private void output2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_output2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_output2ActionPerformed

    private void inputFileSet0PathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileSet0PathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFileSet0PathActionPerformed

    private void findSizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findSizeButtonActionPerformed
        // TODO add your handling code here:
        int amountOfWeights = 0;
        amountOfWeights += inputNodes * hiddenNodes;
        amountOfWeights += hiddenNodes * outputNodes;
        amountOfWeights += inputNodes + hiddenNodes + outputNodes;
        sizeOutputBox.setText(String.valueOf(amountOfWeights));
    }//GEN-LAST:event_findSizeButtonActionPerformed

    private void trainingCountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainingCountButtonActionPerformed
        // TODO add your handling code here:
        int trainingCount = net.getTrainingCount();
        trainingCountOutputBox.setText(String.valueOf(trainingCount));
    }//GEN-LAST:event_trainingCountButtonActionPerformed

    private void massInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_massInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_massInputActionPerformed

    private void biasRateInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biasRateInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_biasRateInputActionPerformed

    private void languageIndexComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageIndexComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_languageIndexComboBoxActionPerformed

    private void updateOutputsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOutputsButtonActionPerformed
        // TODO add your handling code here:
        this.updateOutputs();
    }//GEN-LAST:event_updateOutputsButtonActionPerformed

    private void updateInputsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateInputsButtonActionPerformed
        // TODO add your handling code here:
        this.updateInputs();
    }//GEN-LAST:event_updateInputsButtonActionPerformed

    private void output1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_output1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_output1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    
    public void updateInputs(){
        
        //update network sizing
        inputNodes = Integer.valueOf(inputNodesBox.getText());
        hiddenNodes = Integer.valueOf(hiddenNodesBox.getText());
        outputNodes = Integer.valueOf(outputNodesBox.getText());
        
        //updating input word and turning it into a double array
        String inputWordString = inputWord.getText().toLowerCase();
        inputCharData = inputWordString.toCharArray();
        inputDoubleData = charsToDouble(inputCharData);
        
        //updating language index and the input for predicted output data
        int outputIndex = languageIndexComboBox.getSelectedIndex();
        for(int node = 0; node < outputNodes; node++){
            inputOutputData[node] = (node == outputIndex)? 1 : 0;
        }
        
        //updating filing paths
        fileInputPaths = new String[] {inputFileSet0Path.getText(), inputFileSet1Path.getText(), inputFileSet2Path.getText()};
        javax.swing.JLabel[] langOutputLables = {lang0OutputLabel, lang1OutputLabel, lang2OutputLabel};
        languageIndexComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(fileInputPaths));        
        for(int l = 0; l < fileInputPaths.length; l++){
            langOutputLables[l].setText(fileInputPaths[l]);
        }
        
        //setting back the language index
        languageIndexComboBox.setSelectedIndex(outputIndex);
        
        //updating training constants 
        rate = Double.valueOf(rateInput.getText());
        biasRate = Double.valueOf(biasRateInput.getText());
        mass = Double.valueOf(massInput.getText());
        
        
        //updating required strings
        messageBoxString = messageBox.getText();
        filename = filenameBox.getText();
    }
    
    public void updateOutputs(){
        output = net.output;
        error = net.error;
        
        javax.swing.JTextField[] outputFields = {output0, output1, output2};
        javax.swing.JTextField[] errorFields = {error0, error1, error2};
        double max = 0;
        int maxIndex = 0;
        for(int i = 0; i < outputNodes; i++){
            outputFields[i].setText(String.valueOf(output[i]));
            errorFields[i].setText(String.valueOf(error[i]));
            
            if(output[i] > max){
                max = output[i];
                maxIndex = i;
            }
        }
        
        messageBox.setText(fileInputPaths[maxIndex]);
    }
    
    public double[] charsToDouble(char[] inputChars){
        int cSize = inputChars.length;
        double[] returnDoubleArray = new double[inputNodes];
        
        for(int c = 0; c < cSize; c++){
            int cInt = inputChars[c] - 'a';
            if(cInt > -1 && c < 26){
                returnDoubleArray[c] = ((double) inputChars[c] - 'a' + 1) / 26 ;
            } else{
                returnDoubleArray[c] = 0;
            }
        }
        
        return returnDoubleArray;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JCheckBox autodataCheckbox;
    private javax.swing.JTextField biasRateInput;
    private javax.swing.JLabel biasRateInputLabel;
    private javax.swing.JButton calcButton;
    private javax.swing.JTextField error0;
    private javax.swing.JTextField error1;
    private javax.swing.JTextField error2;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton exportButton;
    private javax.swing.JTextField filenameBox;
    private javax.swing.JButton findSizeButton;
    private javax.swing.JTextField hiddenNodesBox;
    private javax.swing.JButton importButton;
    private javax.swing.JTextField inputFileSet0Path;
    private javax.swing.JTextField inputFileSet1Path;
    private javax.swing.JTextField inputFileSet2Path;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputNodesBox;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JTextField inputWord;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lang0OutputLabel;
    private javax.swing.JLabel lang1OutputLabel;
    private javax.swing.JLabel lang2OutputLabel;
    private javax.swing.JLabel langIndexLabel;
    private javax.swing.JComboBox<String> languageIndexComboBox;
    private javax.swing.JTextField massInput;
    private javax.swing.JLabel massInputLabel;
    private javax.swing.JLabel massLabel;
    private javax.swing.JTextArea messageBox;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton newNetworkButton;
    private javax.swing.JTextField output0;
    private javax.swing.JTextField output1;
    private javax.swing.JTextField output2;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JTextField outputNodesBox;
    private javax.swing.JTextField rateInput;
    private javax.swing.JLabel rateInputLabel;
    private javax.swing.JTextField roundsInput;
    private javax.swing.JTextField sizeOutputBox;
    private javax.swing.JButton trainButton;
    private javax.swing.JButton trainingCountButton;
    private javax.swing.JTextField trainingCountOutputBox;
    private javax.swing.JLabel trainingHeaderLabel;
    private javax.swing.JLabel trainingInputLabel;
    private javax.swing.JButton updateInputsButton;
    private javax.swing.JButton updateOutputsButton;
    // End of variables declaration//GEN-END:variables
}
